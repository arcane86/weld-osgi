<chapter>
    <title id="presentation">Organization of Weld-OSGi</title>
    <section>
        <title>Extension API, integration API and weld integration</title>
        <para>
            Weld-OSGi is not just a Weld integration in OGSi environment. It
            provides three distinct things.
        </para>
        <section>
            <title>Extension API</title>
            <para>
                The extension API defines all the utilities provided to OSGi
                environment using CDI specification. It exposes all the new
                utilities and defines the comportment of the infrastructure
                bundle.
            </para>
            <para>
                New CDI beans are described in order to provide service
                injection as well as the correspondent annotation for
                declaration and qualification.
            </para>
            <para>
                The bean bundle registering system and injectable service
                registering system is implemented using OSGi framework.
            </para>
        </section>
        <section>
            <title>Integration API</title>
            <para>
                TODO
            </para>
        </section>
        <section>
            <title>Weld integration</title>
            <para>
                TODO
            </para>
        </section>
        <para>
            We give more details on these three parts below.
        </para>
    </section>
    <section>
        <title>An OSGi extension for CDI support</title>
        <section>
            <title>The extender pattern</title>
            <para>
                Weld-OSGi provides an extension to OSGi as an extender
                OSGi pattern. The infrastructure bundle, the extender,
                tracks for CDI ready bundles, the extensions,
                to be started. Then CDI utilities are enabled for these
                bundles over OSGi environment.
            </para>
        </section>
        <section>
            <title>TODO</title>
            <para>
                TODO
            </para>
        </section>
    </section>
    <section>
        <title>A standard bootstrap API for CDI container integration</title>
        <section>
            <title>TODO</title>
            <para>
                TODO
            </para>
        </section>
    </section>
    <section>
        <title>Weld integration</title>
        <section>
            <title>TODO</title>
            <para>
                TODO
            </para>
        </section>
    </section>
    <section>
        <title>Weld-OSGi overview</title>
        <section>
            <title>Features</title>
            <para>
                Weld-OSGi deals with many features like:
                <itemizedlist>
                    <listitem>
                        <para>
                            Global management using extender pattern with a
                            infra
                            bundle providing features to the entire application
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Embedded modes to manage your own bundles, with
                            various
                            control policies, in classic OSGi application
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Full annotation configuration following CDI model
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Intra bundle CDI full support: injection, producers,
                            interceptors, decorators ...
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Services injection, with full support of
                            requirement,
                            ldap filtering and OSGi dynamism
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Automatic services publication fully compatible with
                            OSGi
                            service registering system
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Support for OSGi specific injection (such as bundle

                            or
                            manifest headers
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Event notification and inter bundles communication
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                We will see in the next sections these features in deep.
            </para>
        </section>
        <section>
            <title>How to make a bundle or a bean archive a bean bundle</title>
            <para>
                There are very few things to do in order to obtain a bean bundle
                from a bean archive or a bundle.
                Mostly you should just add the missing marker file in the
                archive:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            take your bean archive and make it a bean bundle by
                            adding a <code>META-INF/Manifest.MF</code> file.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            or, in the other way, take your bundle and make it a
                            bean bundle by adding a <code>META-INF/bean
                            .xml</code> file.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                However there is a few other information that Weld-OSGi might
                need in order to perform a correct extension. The following
                introduce the different ways that enable CDI support in an
                OSGi
                bundle.
            </para>            
            <section>
                <title>The beans.xml file</title>
                <para>
                    As for every CDI bean archive, a CDI ready bundle may
                    declare a beans.xml file in order to be extended by
                    Weld-OSGi.
                    This beans.xml file follows no particular rules and
                    should be the same as in a native CDI environment. Thus
                    it can be completely empty or declare interceptors,
                    decorators or alternatives as a regular CDI beans.xml
                    file.
                </para>
            </section>
            <section>
                <title>The Embedded-CDIContainer manifest header</title>
                <para>
                    This header prevents the Weld-OSGi bundle to
                    automatically manage the CDI ready bundle that set this
                    manifest header to true. So the bundle can be manage more
                    finely by the user.
                    If this header is set to false or is not present in
                    the manifest file then the bundle will be automatically
                    manage by the infrastructure bundle (if it is started).
                </para>
            </section>
        </section>
    </section>
</chapter>