<chapter>
    <title id="usages">How to make OSGi easy peasy</title>
    <section>
        <title>CDI usage in your bean bundles</title>
        <para>
            Everything you did in your CDI application you can do in your bean bundle. You can take advantage of
            injection, producers, interceptors and decorators everywhere in your bean bundle. But influence boundary
            of
            the CDI compliant container stay within the bean bundle for classic CDI usages. So you cannot inject
            external dependencies or use interceptor, decorator or alternative of another bean bundle (yet you still
            need to declare your own interceptors, decorators and alternatives in the bean bundle bean.xml).
        </para>
        <para>
            That is all we will say about classic CDI usages, please report to CDI documentation for more information.
        </para>
    </section>
    <section>
        <title>Injecting easiness in OSGi world</title>
        <para>
            CDI-OSGi provides more functionality using CDI for OSGi environment. It mainly focuses on the OSGi
            service
            layer. It addresses the difficulties in publishing and consuming services.
        </para>
        <para>
            CDI-OSGi also provides utilities for event notification and communication in and between bundles as well
            as
            some general OSGi utilities.
        </para>
        <section>
            <title>OSGi services management</title>
            <para>
                Intro ?
            </para>
            <para>
                For our examples we will use this very sophisticated service interface :
                <programlisting>
                    public interface MyService {
                        void doSomething();
                    }
                </programlisting>
            </para>
            <section>
                <title>Obtain a service using injection</title>
                <section>
                    <title>Direct injection using <code>@OSGiService</code></title>
                    <para>
                        The main way to perform an OSGi injection is to use the
                        <code>@Inject @OSGiService</code>
                        annotation combination. It acts like a common injection except that CDI-OSGi will search for
                        injectable instances in the ServiceRegistry.
                    </para>
                    <para>
                        That is how it looks like :
                        <programlisting>
                            @Inject @OSGiService MyService service;
                            service.doSomething();
                        </programlisting>
                    </para>
                </section>
                <section>
                    <title>Filtering services</title>
                    <para>
                        You may not use regular qualifier like with classic injection in OSGi service injection point. Instead you can filter the services obtained using LDAP filter. For that there is the <code>Filter</code> annotation.
                    </para>
                    <para>
                        It works that way:
                        <programlisting>
                            @Inject @OSGiService @Filter("(&amp;(lang=EN)(country=US))") MyService service;
                        </programlisting>
                    </para>
                </section>
                <section>
                    <title>Obtain a service using programmatic lookup</title>
                    <para>
                        As in classic CDI injection you can obtain all the implementation of a service available and
                        then select one at runtime. For that you might use the interface <code>Service&lt;T&gt;</code>.
                    </para>
                    <para>
                        You can iterate over all implementation like that:
                        <programlisting>
                            @Inject Service&lt;MyService&gt; services;
                            if (service.size() > 0) {
                                for (MyService service : services) {
                                    service.doSomething();
                                }
                            }
                        </programlisting>
                        Or you can select the implementation you want:
                        <programlisting>
                            service.select(new AnnotationLiteral&lt;AnyFilter&gt;() {}).get().doSomething();
                        </programlisting>
                        It is possible to add filter directly on the injection point:
                        <programlisting>
                            @Inject @Filter("(&amp;(lang=EN)(country=US))") Service&lt;MyService&gt; service;
                        </programlisting>
                    </para>
                    <para>
                        <code>Service&lt;T&gt;</code> extends CDI <code>Instance&lt;T&gt;</code>
                        so the comportment is the same except that CDI-OSGi will search for injectable instances in
                        the
                        ServiceRegistry.
                    </para>
                </section>
            </section>
        </section>
    </section>
</chapter>
