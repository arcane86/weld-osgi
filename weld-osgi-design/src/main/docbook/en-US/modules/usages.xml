<chapter>
    <title id="usages">How to make OSGi easy peasy</title>
    <section>
        <title>CDI usage in bean bundles</title>
        <para>
            Everything possible in CDI application is possible in bean bundle. They can take advantage of
            injection, producers, interceptors, decorators and alternative. But influence boundary
            of the CDI compliant container stay within the bean bundle for classic CDI usages. So external
            dependencies
            cannot be injected and interceptor, decorator or alternative of another bean bundle cannot be used (yet
            you
            still need to declare your own interceptors, decorators and alternatives in the bean bundle bean.xml file).
        </para>
        <para>
            That is all we will say about classic CDI usages, please report to CDI documentation for more information.
        </para>
    </section>
    <section>
        <title>Injecting easiness in OSGi world</title>
        <para>
            CDI-OSGi provides more functionality using CDI for OSGi environment. It mainly focuses on the OSGi
            service
            layer. It addresses the difficulties in publishing and consuming services.
        </para>
        <para>
            CDI-OSGi also provides utilities for event notification and communication in and between bundles as well
            as
            some general OSGi utilities.
        </para>
        <section>
            <title>OSGi services injection</title>
            <para>
                CDI-OSGi allows developers to publish and consume OSGi services as CDI beans. However, since OSGi
                services are dynamic there are some differences with classic bean injection. This section presents
                how
                OSGi services can be published and consumed using CDI-OSGi.
            </para>
            <para>
                Examples use this very sophisticated service interface :
                <programlisting>
                    public interface MyService {
                        void doSomething();
                    }
                </programlisting>
            </para>
            <section>
                <title>Direct injection using
                    <code>@OSGiService</code>
                </title>
                <para>
                    The main way to perform an OSGi injection is to use the
                    <code>@Inject @OSGiService</code>
                    annotation combination. It acts like a common injection except that CDI-OSGi will search for
                    injectable instances in the service registry.
                </para>
                <para>
                    That is how it looks like :
                    <programlisting>
                        @Inject @OSGiService MyService service;
                        service.doSomething();
                    </programlisting>
                </para>
                <para>
                    The behavior is similar with classic CDI injection.
                    <code>@OSGiService</code>
                    is just a special qualifier that allows extension bundle to manage the injection.
                </para>
            </section>
            <section>
                <title>Obtain a service using programmatic lookup</title>
                <para>
                    As in classic CDI injection you can obtain all the implementation of a service available and
                    then select one at runtime. For that you might use the interface<code>Service&lt;T&gt;</code>.
                    CDI-OSGi will search for all injectable instance in the service registry.
                </para>
                <para>
                    You can get the service like that:
                    <programlisting>
                        @Inject Service&lt;MyService&gt; services;
                        services.get().doSomething();
                    </programlisting>
                    You can also iterate over all implementation like that:
                    <programlisting>
                        @Inject Service&lt;MyService&gt; services;
                        for (MyService service : services) {
                        service.doSomething();
                        }
                    </programlisting>
                </para>
                <para>
                    <code>Service&lt;T&gt;</code>
                    extends CDI
                    <code>Instance&lt;T&gt;</code>
                    so the behavior is similar except that the injection process is managed by the extension bundle.
                </para>
            </section>
        </section>
        <section>
            <title>Clearly specify a service implementation</title>
            <para>
                There might be multiple implementations of the same OSGi service. Like regular bean injection it
                is
                possible to qualify an OSGi service implementation or injection point using qualifiers. But,
                as they
                are OSGi services, it is also possible to use LDAP filter.
            </para>
            <section>
                <title>Using qualifiers</title>
                <para>

                </para>
            </section>
            <section>
                <title>Filtering services</title>
                <para>

                </para>
            </section>
        </section>
        <section>
            <title>Contextual services</title>
            <para>

            </para>
        </section>
        <section>
            <title>Service registry</title>
            <para>

            </para>
        </section>
    </section>
    <section>
        <title>CDI-OSGi events</title>
        <para>

        </para>
    </section>
    <section>
        <title>OSGi utilities</title>
        <para>

        </para>
    </section>
</chapter>
