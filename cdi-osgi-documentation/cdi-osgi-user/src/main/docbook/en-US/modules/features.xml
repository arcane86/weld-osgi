<chapter>
    <title>Weld-OSGi usages</title>
    <section>
        <title>Using Weld in your OSGi bundles</title>
        <para>We have seen that we can use CDI in bean bundle thank to Weld-OSGi. But what exactly
            is happening and what is the limit of the CDI usage in bean bundle.</para>
        <section>
            <title>CDI usage in bean bundles</title>
            <para>In Weld-OSGi every bean gets its own Weld container, so the CDI usage may stay
                within the bean bundle boundary:<itemizedlist>
                    <listitem>
                        <para>Any bean in the bean bundle can be injected only in that bean bundle,
                            so the imported package classes cannot act like CDI bean in the bean
                            bundle</para>
                    </listitem>
                    <listitem>
                        <para>Reciprocally a bean from a bean bundle cannot be injected into another
                            bean bundle, event if the class is in an exported package</para>
                    </listitem>
                    <listitem>
                        <para>Any decorator, interceptor or alternative declaration in the
                                <code>beans.xml</code> file of a bean bundle applies only for this
                            bean bundle</para>
                    </listitem>
                </itemizedlist></para>
            <para>Weld-OSGi provides the Weld container to the bean bundle only after it has
                started, so CDI usage are available only after the Weld container is initialized. In
                the same way CDI usage are unavailable once the Weld container has shutdown. That's
                the reason of <code>onStartup</code> and <code>onShutdown</code> methods from
                previous chapter:<itemizedlist>
                    <listitem>
                        <para>A <code>BundleContainerEvents.BundleContainerInitialized</code> event
                            is fired when CDI usages get available for the bean bundle</para>
                    </listitem>
                    <listitem>
                        <para>A <code>BundleContainerEvents.BundleContainerShutdown</code> event is
                            fired when CDI usages get unavailable for the bean bundle</para>
                    </listitem>
                </itemizedlist>These two events are CDI events and may be observed with regular CDI
                mechanisms.</para>
            <para><programlisting>public void onStartup(@Observes BundleContainerEvents.BundleContainerInitialized event) {
    //CDI usage are available in the bean bundle
}

public void onShutdown(@Observes BundleContainerEvents.BundleContainerShutdown event) {
    //CDI usage are unavailable in the bean bundle
}</programlisting>Try
                to use CDI mechanisms before the
                    <code>BundleContainerEvents.BundleContainerInitialized</code> or after the
                    <code>BundleContainerEvents.BundleContainerShutdown</code> event may result in
                errors.</para>
        </section>
        <section>
            <title>Upgrade the previous example</title>
            <para>Here we assume that you know how to use Weld so we rapidly upgrade the hello-world
                example from the previous chapter to make it a bit more complex using some of the
                CDI features.</para>
            <para>Let our bean bundle say hello (and good bye) to the World in various languages,
                say english, french and german. It may also present himself when it says hello (and
                good bye):<itemizedlist>
                    <listitem>
                        <para>In order to make our bean bundle multilingual we add a qualifier and
                            three implementations of the <code>HelloWorld</code> service:</para>
                        <para><code>com.sample.api.Language.java</code><programlisting>package com.sample.api;

import javax.inject.Qualifier;
import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import static java.lang.annotation.ElementType.*;

@Target({ TYPE, METHOD, PARAMETER, FIELD })
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Qualifier
public @interface Language {
    String value() default "ENGLISH";
}</programlisting></para>
                        <para><code>com.sample.impl.HelloWorldEnglish.java</code><programlisting>package com.sample.impl;

import com.sample.api.HelloWorld;
import com.sample.api.Language;

@Language("ENGLISH")
public class HelloWorldEnglish implements HelloWorld {

    @Override
    public void sayHello() {
        System.out.println("Hello World!");
    }

    @Override
    public void sayGoodbye() {
        System.out.println("Goodbye World!");
    }
}
</programlisting></para>
                        <para><code>com.sample.impl.HelloWorldFrench.java</code><programlisting>package com.sample.impl;

import com.sample.api.HelloWorld;
import com.sample.api.Language;

@Language("FRENCH")
public class HelloWorldFrench implements HelloWorld {

    @Override
    public void sayHello() {
        System.out.println("Bonjour le Monde !");
    }

    @Override
    public void sayGoodbye() {
        System.out.println("Au revoir le Monde !");
    }
}
</programlisting></para>
                        <para><code>com.sample.impl.HelloWorldGerman.java</code><programlisting>package com.sample.impl;

import com.sample.api.HelloWorld;
import com.sample.api.Language;

@Language("GERMAN")
public class HelloWorldGerman implements HelloWorld {
    
    @Override
    public void sayHello() {
        System.out.println("Hallo Welt!");
    }

    @Override
    public void sayGoodbye() {
        System.out.println("Auf Wiedersehen Welt!");
    }
}</programlisting></para>
                    </listitem>
                    <listitem>
                        <para>Now we use an interceptor to present the bean bundle every time it
                            says hello:</para>
                        <para><code>com.sample.api.Presentation.java</code><programlisting>package com.sample.api;

import javax.interceptor.InterceptorBinding;
import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import static java.lang.annotation.ElementType.*;

@Target({ TYPE, METHOD })
@Retention(RetentionPolicy.RUNTIME)
@Documented
@InterceptorBinding
public @interface Presentation {
}</programlisting></para>
                        <para>Modifications in
                            <code>com.sample.impl.HelloWorld*.java</code><programlisting>@Override @Presentation
public void sayHello() {
    System.out.println("Hello World!");
}</programlisting></para>
                        <para><code>com.sample.impl.PresentationInterceptor.java</code><programlisting>package com.sample.impl;

import com.sample.api.Presentation;

import javax.interceptor.AroundInvoke;
import javax.interceptor.Interceptor;
import javax.interceptor.InvocationContext;

@Interceptor
@Presentation
public class PresentationInterceptor {

    @AroundInvoke
    public Object present(InvocationContext ctx) throws Exception {
        ctx.proceed();
        System.out.println("from hello-world-multilingual");
        return null;
    }
}</programlisting></para>
                        <para><code>META-INF/beans.xml</code><programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
    &lt;interceptors>
        &lt;class>com.sample.impl.PresentationInterceptor&lt;/class>
    &lt;/interceptors>
&lt;/beans></programlisting></para>
                    </listitem>
                    <listitem>
                        <para>Finaly we update the <code>com.sample.App.java</code>
                            file:<programlisting>package com.sample;

import com.sample.api.HelloWorld;
import com.sample.api.Language;
import org.osgi.cdi.api.extension.events.BundleContainerEvents;

import javax.enterprise.event.Observes;
import javax.inject.Inject;

public class App {

    @Inject @Language()
    HelloWorld helloWorldEnglish;

    @Inject @Language("FRENCH")
    HelloWorld helloWorldFrench;

    @Inject @Language("GERMAN")
    HelloWorld helloWorldGerman;

    public void onStartup(@Observes BundleContainerEvents.BundleContainerInitialized event) {
        //say hello when the bundle has initialized
        helloWorldEnglish.sayHello();
        helloWorldFrench.sayHello();
        helloWorldGerman.sayHello();
    }

    public void onShutdown(@Observes BundleContainerEvents.BundleContainerShutdown event) {
        //say goodbye when the bundle has shutdown
        helloWorldEnglish.sayGoodbye();
        helloWorldFrench.sayGoodbye();
        helloWorldGerman.sayGoodbye();
    }
}</programlisting></para>
                    </listitem>
                </itemizedlist></para>
            <para>Compile, replace the <code>hello-world.jar</code> bundle in the OSGi environment
                by the <code>hello-world-multiligual.jar</code> bundle and run
                it:<programlisting>Welcome to Apache Felix Gogo

g! Hello World!
from hello-world-multilingual
Bonjour le Monde !
from hello-world-multilingual
Hallo Welt!
from hello-world-multilingual
stop 5
g! Goodbye World!
Au revoir le Monde !
Auf Wiedersehen Welt!</programlisting>CDI
                seems to respond perfectly in an OSGi environment thank to Weld-OSGi. But it is sad
                to use only one bean bundle, in the next section we will see how Weld-OSGi allow to
                use OSGi powerfulness coupled with CDI easiness.</para>
        </section>
    </section>
    <section>
        <title>Publishing and consuming services is easy</title>
        <para>CDI is great but if you choose an OSGi environment it is for using OSGi. Weld-OSGi
            provides numerous features helping you with OSGi in addition with providing CDI usage in
            bean bundle. It mainly focuses on the OSGi service layer by providing new way of
            publishing and consuming OSGi service using CDI way.</para>
        <para>Let us take the hello-world-multilingual example from the previous section and view
            how this can help.</para>
    </section>
    <section>
        <title>Bundles are observing and communicating</title>
        <para/>
    </section>
    <section>
        <title>OSGi in annotations</title>
        <para>TODO</para>
    </section>
</chapter>