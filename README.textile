h1. Weld OSGi integration

This project aims to provide an OSGi integration for Weld.
This project will take full advantage of OSGi like frameworks such as iPojo, Blueprint, SCR, Peaberry, etc ...

h3. How does it works

!https://github.com/mathieuancelin/weld-osgi/raw/master/diagrams.png!

h3. How to use it

to enable Weld in an OSGi bundle, you need to create a beans.xml file in the META-INF folder.

* to make an auto startable bean, just catch the containerInitialized event : 
<pre><code>
public void onStartup(@Observes BundleContainerInitialized event) {}
// on shutdown
public void onStartup(@Observes BundleContainerShutdown event) {}
</code></pre>
* to publish a bean as an OSGi service, add the @Publish annotation on it.
<pre><code>
@Publish
@ApplicationScoped
public class MyServiceImpl implements MyService {
	...
}
</code></pre>
* to inject an OSGi service, use the @OSGiService qualifier. You can also use the OSGi service provider :
<pre><code>
@Inject @OSGiService MyService service;
...
service.doSomething();
...	
@Inject Service<MyService> myService;
...
myService.get().doSomething();
</code></pre>	
* to inject multiple OSGi services (whiteboard pattern), use the OSGi services provider :
<pre><code>
@Inject Services<MyService> myServices;
...	
for (MyService myService : myServices) {
	...
}
</code></pre>
* to deal with services dynamics, you can catch services events with :
<pre><code>
public void bindService(@Observes ServiceArrival event) {}
public void unbindService(@Observes ServiceDeparture event) {}
public void changeService(@Observes ServiceChange event) {}
</code></pre>

you can also filter event :

<pre><code>	
public void bindService(@Observes @Specification(MyService.class) ServiceArrival event) {}
</code></pre>


h3. Play with samples

This project provide a small sample project that shows how to use Weld integration with OSGi.
The sample is actually a small shapes drawing software in which you can add new shapes.

To use the sample, first build the entire Weld OSGi project with :

<pre><code>mvn clean install</code></pre>

then launch the sample with :

<pre><code>./build-weld-osgi.sh</code></pre>

this script will launch an Apache Felix container with the right bundles within. A swing window should be displayed :

!https://github.com/mathieuancelin/weld-osgi/raw/master/sample1.png!

You can play with it by clicking on the red shape and drawing circles in the white area.

Now if you want more shape, you need to find out the id of the shape bundle. In your Felix terminal type the "ps" command.
You should get something like that :

<pre><code>
> ps

...
[   4] [Installed  ] [    1] Weld OSGi :: Samples :: Paint :: Triangle (1.0.0.SNAPSHOT)
[   5] [Installed  ] [    1] Weld OSGi :: Samples :: Paint :: Square (1.0.0.SNAPSHOT)
...
</code></pre>
Now you can start the "triangle bundle" by typing : 

<pre><code>start 4</code></pre>

!https://github.com/mathieuancelin/weld-osgi/raw/master/sample2.png!

and the "square bundle" :

<pre><code>start 5</code></pre>

!https://github.com/mathieuancelin/weld-osgi/raw/master/sample3.png!

you can also stop bundles :

<pre><code>stop 4</code></pre>

!https://github.com/mathieuancelin/weld-osgi/raw/master/sample4.png!
